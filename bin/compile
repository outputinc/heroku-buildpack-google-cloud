#!/usr/bin/env bash

# Usage:
#
#     $ bin/compile <build-dir> <cache-dir> <env-path>

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BUILDPACK_DIR=`cd $(dirname $0); cd ..; pwd`

VENDOR_DIR=$BUILD_DIR/vendor
mkdir -p $VENDOR_DIR

# Download and install Google Cloud SDK
wget https://dl.google.com/dl/cloudsdk/release/google-cloud-sdk.zip -qO /tmp/google-cloud-sdk.zip
unzip -qd $VENDOR_DIR /tmp/google-cloud-sdk.zip
$VENDOR_DIR/google-cloud-sdk/install.sh --usage-reporting=false --path-update=false --bash-completion=false
rm -rf /tmp/google-cloud-sdk.zip
rm -rf $VENDOR_DIR/google-cloud-sdk/.install/

# Copy .profile.d script for configuring gcloud
mkdir -p $BUILD_DIR/.profile.d
cp $BUILDPACK_DIR/profile.d/heroku-google-cloud.sh $BUILD_DIR/.profile.d

# Add gcloud to PATH
export PATH=$VENDOR_DIR/google-cloud-sdk/bin:$PATH

# Install kubectl
if [ -r "$ENV_DIR/INSTALL_KUBECTL" ]; then
    INSTALL_KUBECTL="$(cat "$ENV_DIR/INSTALL_KUBECTL")"
    if [ $INSTALL_KUBECTL == "true" ]; then
        gcloud components install kubectl --quiet
    fi
fi

# Install python-google-keyring before logging in
pip install keyring keyrings.google-artifactregistry-auth

# Activate Service Account
if [ -r "$ENV_DIR/GOOGLE_CREDENTIALS" ]; then
    GOOGLE_CREDENTIALS="$(cat "$ENV_DIR/GOOGLE_CREDENTIALS")"
    echo $GOOGLE_CREDENTIALS | base64 -d > /app/google-credentials.json
    gcloud auth activate-service-account --key-file /app/google-credentials.json
fi

# Install pythonbq
pip install --no-build-isolation --extra-index-url https://us-west2-python.pkg.dev/second-casing-278016/output-pypi/simple/ output-pythonbq>=2.1.2
